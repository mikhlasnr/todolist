{"version":3,"sources":["actions/index.js","components/AddTodo.js","components/Todo.js","components/Todos.js","containers/Todos.js","components/Footer.js","containers/FilterLink.js","components/App.js","serviceWorker.js","reducers/list.js","reducers/filter.js","reducers/index.js","index.js"],"names":["nexTodoid","initData","todos","type","payload","initDataStarted","initDataFailed","connect","input","dispatch","onSubmit","e","text","preventDefault","value","trim","id","ref","node","Todo","onClick","completed","style","textDecoration","Todos","this","props","axios","get","then","res","console","log","data","length","catch","err","loading","error","map","todo","key","Component","getTodos","filter","item","Error","state","list","Footer","className","val","setFilter","App","FilterLink","Boolean","window","location","hostname","match","initialState","action","combineReducers","store","createStore","reducer","applyMiddleware","thunk","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.af547cef.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nlet nexTodoid = 0\r\n\r\nexport const addTodo = text => ({\r\n    type: \"ADD_TODO\", \r\n    payload : {\r\n        id : nexTodoid++, \r\n        text \r\n    }\r\n})\r\n\r\nexport const toggleTodo = id => ({\r\n    type : \"TOGGLE_TODO\",\r\n    payload : {id}\r\n})\r\n\r\nexport const setFilter = filter => ({type : \"SET_FILTER\", filter})\r\n\r\nexport const fetchTodos = () => {\r\n    return dispatch => {\r\n        dispatch(initDataStarted())\r\n\r\n        axios.get(\"https://my-json-server.typicode.com/mikhlasnr/fakeapi/todos\")\r\n            .then((res) => {\r\n                console.log(res)\r\n                dispatch(initData(res.data))\r\n                nexTodoid = res.data[res.data.length - 1].id + 1\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n                dispatch(initDataFailed())\r\n            })\r\n    }\r\n}\r\n\r\nconst initData = todos => ({\r\n    type : \"INIT_DATA\",\r\n    payload : {todos}\r\n})\r\n\r\nconst initDataStarted = () => ({\r\n    type : \"INIT_DATA_STARTED\",\r\n})\r\n\r\nconst initDataFailed = () => ({\r\n    type : \"INIT_DATA_FAILED\",\r\n})","import React from 'react';\r\nimport {connect} from 'react-redux'\r\nimport {addTodo} from '../actions'\r\n\r\nconst AddTodo = ({dispatch}) => {\r\n    let input\r\n    return(\r\n        <>\r\n            <form onSubmit={ e => {\r\n                e.preventDefault()\r\n                if(!input.value.trim()) return\r\n                dispatch(addTodo(input.value))\r\n                input.value = ''\r\n            }}>\r\n                <input ref={node => input = node}/>\r\n                <button type=\"submit\">+ Add todo</button>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default connect()(AddTodo) ;\r\n","import React from 'react'\r\n\r\nconst Todo = ({onClick, completed, text}) => {\r\n    return (\r\n        <li \r\n            onClick={onClick}\r\n            style={{\r\n                textDecoration : completed ? 'line-through' : 'none'\r\n            }}\r\n        > {text} </li>\r\n    )\r\n}\r\n\r\nexport default Todo;","import React, { Component } from 'react'\r\nimport Todo from './Todo'\r\nimport {fetchTodos, toggleTodo} from '../actions'\r\n\r\nclass Todos extends Component{\r\n\r\n    componentDidMount(){\r\n        this.props.dispatch(fetchTodos())\r\n    }\r\n\r\n    render(){\r\n        const {todos, dispatch, loading, error} = this.props\r\n        \r\n        if(loading) return <div>Loading ...</div>;\r\n\r\n        if(error) return <div>Something's wrong...</div>;\r\n        \r\n        return(\r\n            <ul>\r\n                {todos.map(todo => (\r\n                    <Todo \r\n                        key={todo.id} \r\n                        {...todo} \r\n                        onClick={() => dispatch(toggleTodo(todo.id))}\r\n                    />\r\n                ))}\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Todos","import {connect} from 'react-redux'\r\nimport Todos from '../components/Todos'\r\n\r\nconst getTodos = (todos, filter) => {\r\n    switch (filter) {\r\n        case \"ALL\":\r\n            return todos\r\n        case \"COMPLETED\":\r\n            return todos.filter(item => item.completed)\r\n        case \"ACTIVE\":\r\n            return todos.filter(item => !item.completed)\r\n        default:\r\n            throw new Error(\"Filter tidak dikenali : \" + filter);\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    todos: getTodos(state.list.todos, state.filter),\r\n    loading : state.list.loading,\r\n    error : state.list.error\r\n})\r\n\r\nexport default connect(mapStateToProps)(Todos) ;","import React from 'react'\r\nimport './footer.css'\r\n\r\nfunction Footer({filter}) {\r\n    return (\r\n        <article>\r\n            <div>Filter : </div>\r\n            <div \r\n                className=\"btn\" \r\n                onClick={() => filter(\"ALL\")}\r\n            >ALL</div>\r\n            <div \r\n                className=\"btn\"\r\n                onClick={() => filter(\"COMPLETED\")}\r\n            >Completed</div>\r\n            <div \r\n                className=\"btn\"\r\n                onClick={() => filter(\"ACTIVE\")}\r\n            >Active</div>\r\n        </article>\r\n    )\r\n}\r\n\r\nexport default Footer","import {setFilter} from '../actions'\r\nimport {connect} from 'react-redux'\r\nimport Footer from '../components/Footer'\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    filter : val => dispatch(setFilter(val))\r\n})\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(Footer)","import React from 'react';\nimport '../App.css';\nimport AddTodo from './AddTodo'\nimport Todos from '../containers/Todos'\nimport FilterLink from '../containers/FilterLink'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <AddTodo />\n        <Todos />\n        <FilterLink />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","let initialState = {\r\n    todos : [],\r\n    error : false,\r\n    loading : false\r\n}\r\n\r\nconst list = (state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n        case \"INIT_DATA\" :\r\n            return {\r\n                ...state,\r\n                todos : [...state.todos, ...action.payload.todos],\r\n                loading : false\r\n            }\r\n\r\n        case \"INIT_DATA_STARTED\" :\r\n            return {\r\n                ...state,\r\n                loading : true\r\n            }\r\n\r\n        case \"INIT_DATA_FAILED\" :\r\n            return {\r\n                ...state,\r\n                loading : false,\r\n                error : true\r\n            }\r\n\r\n        case \"ADD_TODO\":\r\n            return {\r\n                ...state, \r\n                todos : [\r\n                    ...state.todos,\r\n                    {\r\n                        id: action.payload.id,\r\n                        text: action.payload.text,\r\n                        completed: false\r\n                    }\r\n                ]\r\n            }\r\n\r\n        case \"TOGGLE_TODO\":\r\n            return {\r\n                ...state,\r\n                todos: state.todos.map(\r\n                        todo => (\r\n                            todo.id === action.payload.id\r\n                                ? {...todo, completed : !todo.completed}\r\n                                : todo\r\n                        ))\r\n                \r\n            }\r\n            \r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default list;","const filter = (state = \"ALL\", action) => {\r\n    switch (action.type) {\r\n        case \"SET_FILTER\":\r\n            return action.filter\r\n            \r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default filter;","import {combineReducers} from 'redux'\r\nimport list from './list'\r\nimport filter from './filter'\r\n\r\n\r\n\r\nexport default combineReducers({\r\n    list,\r\n    filter\r\n})","import React from 'react';\nimport {render} from 'react-dom';\nimport { createStore , applyMiddleware} from 'redux';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from './reducers'\nimport thunk from 'redux-thunk'\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}